{"name":"Mindless","tagline":"The Lightweight and Straightforward MVC framework","body":"Mindless MVC Framework v1.0.0\r\n=============\r\n\r\nOnly 15 KB, the Lightweight and Straightforward MVC Framework\r\n___________________\r\n\r\n## Two Step Intallation\r\n\r\nMindless is incredibly easy to install, and only requires simple file manipulation.\r\n\r\n1. Download Mindless MVC as a zip\r\n2. Extract the contents of the \"Mindless\" folder (The one that contains \"index.php\" and \"app\") into the root folder of the directory where you wish to install the framework.\r\n\r\n## Configuration\r\n\r\nAll configuration settings are stored in \"app/config.php\". Enter your MySQL connection details in the 'db' array, or set 'use_db' to false to prohibit the framework from automatically connecting.\r\n\r\n## Routing\r\n\r\nTwo types of routing are supported, and can be supported simultaneously.\r\n\r\n1. Vanilla Routing\r\n\r\n\tThis is the most basic routing available. The framework will attempt to match a pattern to the request URI.\r\n\tFor example: mysite.com/user/james/\r\n\r\n\tIt will first check if \"user\" is a valid controller name. If it is, the framework knows that request is specifying the controller name, and will then check if \"james\" is a valid action on the User controller. If it is, it calls the function JamesAction(). Otherwise, it defaults to IndexAction(). If \"user\" is not a valid controller, it defaults to the \"Home\" controller.\r\n\r\n\tAll other parts separated by slashes are treated as parameters and passed to the Action.\r\n\r\n2. Defined Routing\r\n\t\r\n\tSpecific routes can be defined in \"app/http/routing.php\". They also take precedent over vanilla routes.\r\n\r\n\tTo enable ONLY defined routes and disallow vanilla routing, set 'strict_routing' to true in \"config.php\".\r\n\r\n\tTo define a route, you must call $router->route() like so:\r\n\troute(request method, uri string pattern, controller name (excluding the 'Controller' on the end), entire action name)\r\n\r\n\tFor example:\r\n\r\n\t```php\r\n\t$router->route('post', '/signup/:id', 'User', 'newUserFunction');\r\n\t```\r\n\r\n\tThis will cause any URI matching the pattern of mysite.com/signup/someRandomParameter to call the \"newUserFunction\" action on the \"User\" controller, with \"someRandomParameter\" provided as an argument.\r\n\r\n\r\n## Controllers and Actions\r\n\r\nAll controllers are stored within the \"app/controllers\" folder. To make a new controller, first name the file \"NameController.php\". Then, in the file, you must have at least the following:\r\n\r\n```php\r\nclass NameController extends Controller {\r\n\tpublic function __construct() {\r\n\t\tparent::__construct();\r\n\t}\r\n}\r\n```\r\n\r\nAnd that's it.\r\n\r\n### Method Types\r\n\r\nFor Actions, there are two types:\r\n\r\n1. Method Agnostic Actions\r\n\tThese actions do not care for the request method, and are defined like this:\r\n\r\n\t```php\r\n\tclass UserController extends Controller {\r\n\t\tpublic function SomeAction() {\r\n\t\t\t// More code here\r\n\t\t}\r\n\t}\r\n\t```\r\n\r\n\tIn vanilla routing, the request for mysite.com/user/some will call this function.\r\n\r\n2. Method Specific Actions\r\n\tThese actions are specified for a certain request method, i.e. Post, Get, Delete, etc. Please note that these actions take precedent over the method agnostic ones.\r\n\tTo define a method specific action:\r\n\r\n\t```php\r\n\tclass UserController extends Controller {\r\n\t\tpublic function SomeActionPost() {\r\n\t\t\t// More code here\r\n\t\t}\r\n\t}\r\n\t```\r\n\r\n\tIf mysite.com/user/some is called using the post method, then this action will be called.\r\n\r\nPlease Note: Both types of methods can be used. For example:\r\n\r\n```php\r\nclass UserController extends Controller {\r\n\tpublic function SomeAction() {\r\n\t\t// This function is called as a fallback\r\n\t}\r\n\tpublic function SomeActionPost() {\r\n\t\t// This function is called only if the \"Some\" action is called on the \"User\" controller\r\n\t\t// using the \"POST\" method\r\n\t}\r\n}\r\n```\r\n\r\nHere, if mysite.com/user/some is requested with the POST method, \"SomeActionPost\" will be called. However, if any other method is used, it defaults to \"SomeAction\". \r\n\r\n### Parameters\r\n\r\nParameters can be passed to actions by specifying arguments in the function:\r\n\r\n```php\r\npublic function SomeAction($email, $id) {\r\n\t\r\n}\r\n```\r\n\r\nThough you must manually check that they are supplied to the function.\r\n\r\n### Lazy Loading\r\n\r\nThere is no need to require models individually since lazy loading is enabled. Hence, when creating actions, you can simply begin to use model classes as though they were already defined:\r\n\r\n```php\r\npublic function SomeAction() {\r\n\t$user = new User();\r\n}\r\n```\r\n\r\nThe framework will automatically include the \"User\" class, thus reducing the number of files to only the ones needed per request.\r\n\r\n## Models\r\n\r\nAll models are stored in the \"app/models\" folder. They have no naming requirements other than the name of the file is the same as the class name.\r\n\r\nFor example, when constructing a \"User\" model, first create a \"User.php\" file in \"app/models\". Then write in the \"User.php\" file:\r\n\r\n```php\r\nclass User extends Model {\r\n\tpublic function __construct() {\r\n\t\tparent::__construct();\r\n\t}\r\n}\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}